// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	reddit "github.com/jqdurham/reddit/internal/reddit"
	mock "github.com/stretchr/testify/mock"
)

// ListingFetcher is an autogenerated mock type for the ListingFetcher type
type ListingFetcher struct {
	mock.Mock
}

// FetchAllListings provides a mock function with given fields: ctx, path
func (_m *ListingFetcher) FetchAllListings(ctx context.Context, path string) ([]*reddit.Listing, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllListings")
	}

	var r0 []*reddit.Listing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*reddit.Listing, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*reddit.Listing); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*reddit.Listing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchListing provides a mock function with given fields: ctx, path
func (_m *ListingFetcher) FetchListing(ctx context.Context, path string) (*reddit.Listing, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for FetchListing")
	}

	var r0 *reddit.Listing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*reddit.Listing, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *reddit.Listing); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reddit.Listing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewListingFetcher creates a new instance of ListingFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListingFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListingFetcher {
	mock := &ListingFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
